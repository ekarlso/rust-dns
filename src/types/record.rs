use std::str::FromStr;

use types::raw::FromRaw;

pub enum RType {
    NONE = 0,
    A = 1,
    NS = 2,
    MD = 3,
    MF = 4,
    CNAME = 5,
    SOA = 6,
    MB = 7,
    MG = 8,
    MR = 9,
    NULL = 10,
    WKS = 11,
    PTR = 12,
    HINFO = 13,
    MINFO = 14,
    MX = 15,
    TXT = 16,
    RP = 17,
    AFSDB = 18,
    X25 = 19,
    ISDN = 20,
    RT = 21,
    NSAP = 22,
    NSAPPTR = 23,
    SIG = 24,
    KEY = 25,
    PX = 26,
    GPOS = 27,
    AAAA = 28,
    LOC = 29,
    NXT = 30,
    EID = 31,
    NIMLOC = 32,
    SRV = 33,
    ATMA = 34,
    NAPTR = 35,
    KX = 36,
    CERT = 37,
    DNAME = 39,
    OPT = 41,
    DS = 43,
    SSHFP = 44,
    IPSECKEY = 45,
    RRSIG = 46,
    NSEC = 47,
    DNSKEY = 48,
    DHCID = 49,
    NSEC3 = 50,
    NSEC3PARAM = 51,
    TLSA = 52,
    HIP = 55,
    NINFO = 56,
    RKEY = 57,
    TALINK = 58,
    CDS = 59,
    OPENPGPKEY = 61,
    SPF = 99,
    UINFO = 100,
    UID = 101,
    GID = 102,
    UNSPEC = 103,
    NID = 104,
    L32 = 105,
    L64 = 106,
    LP = 107,
    EUI48 = 108,
    EUI64 = 109,
    TKEY = 249,
    TSIG = 250,
    IXFR = 251,
    AXFR = 252,
    MAILB = 253,
    MAILA = 254,
    ANY = 255,
    URI = 256,
    CAA = 257,
    TA = 32768,
    DLV = 32769,
    Reserved = 65535,
}

impl FromStr for RType {
   fn from_str(s: &str) -> Option<RType> {
        let i = match s {
            "NONE"         => RType::NONE,
            "A"            => RType::A,
            "NS"           => RType::NS,
            "MD"           => RType::MD,
            "MF"           => RType::MF,
            "CNAME"        => RType::CNAME,
            "SOA"          => RType::SOA,
            "MB"           => RType::MB,
            "MG"           => RType::MG,
            "MR"           => RType::MR,
            "NULL"         => RType::NULL,
            "WKS"          => RType::WKS,
            "PTR"          => RType::PTR,
            "HINFO"        => RType::HINFO,
            "MINFO"        => RType::MINFO,
            "MX"           => RType::MX,
            "TXT"          => RType::TXT,
            "RP"           => RType::RP,
            "AFSDB"        => RType::AFSDB,
            "X25"          => RType::X25,
            "ISDN"         => RType::ISDN,
            "RT"           => RType::RT,
            "NSAP"         => RType::NSAP,
            "NSAPPTR"      => RType::NSAPPTR,
            "SIG"          => RType::SIG,
            "KEY"          => RType::KEY,
            "PX"           => RType::PX,
            "GPOS"         => RType::GPOS,
            "AAAA"         => RType::AAAA,
            "LOC"          => RType::LOC,
            "NXT"          => RType::NXT,
            "EID"          => RType::EID,
            "NIMLOC"       => RType::NIMLOC,
            "SRV"          => RType::SRV,
            "ATMA"         => RType::ATMA,
            "NAPTR"        => RType::NAPTR,
            "KX"           => RType::KX,
            "CERT"         => RType::CERT,
            "DNAME"        => RType::DNAME,
            "OPT"          => RType::OPT,
            "DS"           => RType::DS,
            "SSHFP"        => RType::SSHFP,
            "IPSECKEY"     => RType::IPSECKEY,
            "RRSIG"        => RType::RRSIG,
            "NSEC"         => RType::NSEC,
            "DNSKEY"       => RType::DNSKEY,
            "DHCID"        => RType::DHCID,
            "NSEC3"        => RType::NSEC3,
            "NSEC3PARAM"   => RType::NSEC3PARAM,
            "TLSA"         => RType::TLSA,
            "HIP"          => RType::HIP,
            "NINFO"        => RType::NINFO,
            "RKEY"         => RType::RKEY,
            "TALINK"       => RType::TALINK,
            "CDS"          => RType::CDS,
            "OPENPGPKEY"   => RType::OPENPGPKEY,
            "SPF"          => RType::SPF,
            "UINFO"        => RType::UINFO,
            "UID"          => RType::UID,
            "GID"          => RType::GID,
            "UNSPEC"       => RType::UNSPEC,
            "NID"          => RType::NID,
            "L32"          => RType::L32,
            "L64"          => RType::L64,
            "LP"           => RType::LP,
            "EUI48"        => RType::EUI48,
            "EUI64"        => RType::EUI64,
            "TKEY"         => RType::TKEY,
            "TSIG"         => RType::TSIG,
            "IXFR"         => RType::IXFR,
            "AXFR"         => RType::AXFR,
            "MAILB"        => RType::MAILB,
            "MAILA"        => RType::MAILA,
            "ANY"          => RType::ANY,
            "URI"          => RType::URI,
            "CAA"          => RType::CAA,
            "TA"           => RType::TA,
            "DLV"          => RType::DLV,
            "Reserved"     => RType::Reserved,
            _              => panic!("Invalid RType")
        };

        Some(i)
    }

}

impl FromRaw for RType {
    fn from_raw(r: int) -> RType {
        match r {
            0       => RType::NONE,
            1       => RType::A,
            2       => RType::NS,
            3       => RType::MD,
            4       => RType::MF,
            5       => RType::CNAME,
            6       => RType::SOA,
            7       => RType::MB,
            8       => RType::MG,
            9       => RType::MR,
            10      => RType::NULL,
            11      => RType::WKS,
            12      => RType::PTR,
            13      => RType::HINFO,
            14      => RType::MINFO,
            15      => RType::MX,
            16      => RType::TXT,
            17      => RType::RP,
            18      => RType::AFSDB,
            19      => RType::X25,
            20      => RType::ISDN,
            21      => RType::RT,
            22      => RType::NSAP,
            23      => RType::NSAPPTR,
            24      => RType::SIG,
            25      => RType::KEY,
            26      => RType::PX,
            27      => RType::GPOS,
            28      => RType::AAAA,
            29      => RType::LOC,
            30      => RType::NXT,
            31      => RType::EID,
            32      => RType::NIMLOC,
            33      => RType::SRV,
            34      => RType::ATMA,
            35      => RType::NAPTR,
            36      => RType::KX,
            37      => RType::CERT,
            39      => RType::DNAME,
            41      => RType::OPT,
            43      => RType::DS,
            44      => RType::SSHFP,
            45      => RType::IPSECKEY,
            46      => RType::RRSIG,
            47      => RType::NSEC,
            48      => RType::DNSKEY,
            49      => RType::DHCID,
            50      => RType::NSEC3,
            51      => RType::NSEC3PARAM,
            52      => RType::TLSA,
            55      => RType::HIP,
            56      => RType::NINFO,
            57      => RType::RKEY,
            58      => RType::TALINK,
            59      => RType::CDS,
            61      => RType::OPENPGPKEY,
            99      => RType::SPF,
            100     => RType::UINFO,
            101     => RType::UID,
            102     => RType::GID,
            103     => RType::UNSPEC,
            104     => RType::NID,
            105     => RType::L32,
            106     => RType::L64,
            107     => RType::LP,
            108     => RType::EUI48,
            109     => RType::EUI64,
            249     => RType::TKEY,
            250     => RType::TSIG,
            251     => RType::IXFR,
            252     => RType::AXFR,
            253     => RType::MAILB,
            254     => RType::MAILA,
            255     => RType::ANY,
            256     => RType::URI,
            257     => RType::CAA,
            32768   => RType::TA,
            32769   => RType::DLV,
            65535   => RType::Reserved,
            _       => panic!("Invalid RType")
        }
    }
}


